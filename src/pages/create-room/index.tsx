import { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import NavBar from "../../components/navigation/NavBar";
import { api } from "../../utils/api";
import Image from "next/image";
import { CreateForm as zodForm, type createFormType } from "../../types/create-room-types";

const CreateRoomHome: NextPage = () => {
  return <>
    <Head>
      <title>Watch-tube - Create room</title>
      <meta name="description" content="Generated by create-t3-app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main className="bg-main h-screen">
      <NavBar />
      <CreateRoomForm />
    </main>

  </>
}

const CreateRoomForm = () => {
  const users = api.usersApi.allUsers.useMutation();
  const [searchUser, setSearch] = useState(users.data);
  const [invitedUsers, setInvitedUsers] = useState<{ name: string | null, image: string | null }[]>([]);
  const [createForm, setForm] = useState<createFormType>({roomName:'',roomInvites:[],roomLink:''});
  const sendForm  = api.createRoom.createRoom.useMutation();
  const [error, setError] = useState('');
  

  const validateSend = () => {
    const form = zodForm.safeParse(createForm);

    if(form.success){
      sendForm.mutate(createForm);
      setError('')
    }else{
      setError(form.error.issues[0]?.message || '');
    }
  }
  

  useEffect(() => {
    users.mutate();
  }, [])

  const search = (input: String) => {
    if (users != undefined) {
      setSearch(users.data?.filter(e => {
        if (input == "") {
          setSearch();
        } else {
          return e.name?.toLowerCase().match(input.toLowerCase());
        }
      }));
    }
  };

  return <>
    <div className="w-full px-5 py-5">
      <p className="text-white font-semibold text-2xl">Room name</p>
      <input
        className="text-white bg-secondary p-2 w-full border"
        placeholder="Room name"
        onInput={(e) => {
          setForm({ roomLink: createForm?.roomLink || '', roomInvites: createForm?.roomInvites || [], roomName: e.target.value })
        }}
      />
      <p className="text-white font-semibold text-2xl pt-5">Vidoe link</p>
      <input className="text-white bg-secondary p-2 w-full border focus:outline-slate-300" placeholder="https://www.youtube.com/embed/dQw4w9WgXcQ"
        onInput={(e) => {
          setForm({ roomLink: e.target.value, roomInvites: createForm?.roomInvites || [], roomName: createForm?.roomName || ''  })
        }}
      />

      <div className="mt-5 border py-2 text-white px-4">
        <p className="text-white font-semibold text-2xl">Invited users</p>
        <div>{
          invitedUsers != undefined ? <>
            {
              invitedUsers.map(e => {
                return <div key={e.name}>
                  <DisplayUser
                    image={e.image || 'null'}
                    name={e.name || 'null'}
                    key={e.image}
                  />
                </div>
              })
            }
          </>
            : <div className="">None</div>
        }</div>
        <p className="text-white font-semibold text-2xl pt-5" >Search users</p>
        <input className="text-white bg-secondary p-2 w-full border focus:outline-slate-300 mb-2" onInput={e => search(e.target.value)} />
        {
          searchUser != undefined ? <>
            {
              searchUser.map((e, index) => {
                return <div onClick={() => {
                  setInvitedUsers([...invitedUsers, { name: e.name, image: e.image }]);
                  console.log(index);
                  searchUser.splice(index);
                  users.data?.splice(index);
                  createForm?.roomInvites.push(e.id);
                }
                } key={e.name}>
                  <DisplayUser
                    image={e.image || 'error'}
                    name={e.name || 'error'}
                    key={e.name}
                  />
                </div>
              })
            }
          </>
            : <div className="hidden"></div>
        }
      </div>
      <button className="bg-secondary text-white w-full py-3 text-2xl mt-10" onClick={validateSend}>Create room</button>
      <DisplayError error={ error } />
    </div>
  </>
}

export const DisplayError = ({error}:{error:string}) =>{
  if(error!=''){
    return <div className="absolute bottom-4 left-4 bg-red-600 text-white p-2">
      {error}
    </div>
  }
  else{
    return <></>
  }
}

export const DisplayUser = ({ name, image }: { name: String, image: string }) => {
  return <div>
    <div className="flex items-center gap-2 cursor-pointer" >
      <Image
        src={image}
        alt="profile picture"
        width={40}
        height={40}
        className="rounded-full border aspect-square"
      />
      <p>{name}</p>
    </div>
  </div>
}

export default CreateRoomHome;
